// Code generated by MockGen. DO NOT EDIT.
// Source: savepoint.go

// Package resource is a generated GoMock package.
package tasks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSavepoint is a mock of Savepoint interface.
type MockSavepoint struct {
	ctrl     *gomock.Controller
	recorder *MockSavepointMockRecorder
}

// MockSavepointMockRecorder is the mock recorder for MockSavepoint.
type MockSavepointMockRecorder struct {
	mock *MockSavepoint
}

// NewMockSavepoint creates a new mock instance.
func NewMockSavepoint(ctrl *gomock.Controller) *MockSavepoint {
	mock := &MockSavepoint{ctrl: ctrl}
	mock.recorder = &MockSavepointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSavepoint) EXPECT() *MockSavepointMockRecorder {
	return m.recorder
}

// Offset mocks base method.
func (m *MockSavepoint) Offset(ctx context.Context, offset *int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", ctx, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockSavepointMockRecorder) Offset(ctx, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockSavepoint)(nil).Offset), ctx, offset)
}

// SetOffset mocks base method.
func (m *MockSavepoint) SetOffset(ctx context.Context, offset int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOffset", ctx, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOffset indicates an expected call of SetOffset.
func (mr *MockSavepointMockRecorder) SetOffset(ctx, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOffset", reflect.TypeOf((*MockSavepoint)(nil).SetOffset), ctx, offset)
}
